Version 1
SubGoalCombiner SGC_AND

INITSECTION
DB_Combat_ExplodeOnDeath(BLIGHT_NeedleBlight_Dark_A_eccd3da9-5ca0-4403-806a-439d12978dcb, 750, 2, "Projectile_Burst_Blight_Needle");
DB_Combat_ExplodeOnDeath(Intellect_Detonator_ae4dc4a7-a72d-435b-b081-84a31dba6d7d, 1180, 1, "Projectile_DeathBurst_IntellectDevourer");
DB_Combat_ExplodeOnDeath(Intellect_Devourer_Explosive_3f834dd9-22d9-4599-ab5d-359b4d6f418f, 1180, 1, "Projectile_DeathBurst_IntellectDevourer");
DB_Combat_ExplodeOnDeath(Intellect_Detonator_BrainBattle_03e27be2-fbbf-4724-80a7-d41d91528258, 1180, 1, "Projectile_DeathBurst_IntellectDevourer");
DB_Combat_RemoveStatusOnLongRest("COL_RESTORE_DRAIN");
DB_Combat_RemoveStatusOnLongRest("COL_MYRKULITE_BLESSING");
DB_Combat_RemoveStatusOnLongRest_TriggerException("COL_RESTORE_DRAIN", S_COL_Colony_SUB_c72269e5-0719-4379-a8ea-ca2ca199d0a3);
DB_Combat_RemoveStatusOnLongRest_TriggerException("COL_MYRKULITE_BLESSING", S_COL_Colony_SUB_c72269e5-0719-4379-a8ea-ca2ca199d0a3);
DB_Combat_Ability("Strength");
DB_Combat_Ability("Dexterity");
DB_Combat_Ability("Constitution");
DB_Combat_Ability("Intelligence");
DB_Combat_Ability("Wisdom");
DB_Combat_Ability("Charisma");
DB_Combat_NegativeAbilityScoreStatus("LOW_GITHYANKIPRODIGY_MENTALIMAGE");
DB_Combat_NegativeAbilityScoreStatus("STRENGTH_DRAIN");
DB_Combat_NegativeAbilityScoreStatus("INT_ABSOLUTEPAIN_03");
NOT DB_Combat_Dragon_HitProxies(NULL_00000000-0000-0000-0000-000000000000, "");
NOT DB_Combat_Dragon_HitProxies(NULL_00000000-0000-0000-0000-000000000000, "", NULL_00000000-0000-0000-0000-000000000000, 0, 0, 0);
NOT DB_Combat_Dragon_ProxyOwner(NULL_00000000-0000-0000-0000-000000000000, "");
DB_CMB_LevelUpNpcInRegion(S_GLO_Desire_8b9fa503-7205-4ddd-bdfa-bfaa781d9ea9, "BGO_Main_A", 11, "LOW_FLORRICK_LEVEL_11");
DB_CMB_LevelUpNpcInRegion(S_GLO_Desire_8b9fa503-7205-4ddd-bdfa-bfaa781d9ea9, "CTY_Main_A", 11, "LOW_FLORRICK_LEVEL_11");
DB_CMB_LevelUpNpcInRegion(S_DEN_TieflingLeader_475200ee-cc3c-4dbe-84b1-1820c02ea26a, "SCL_Main_A", 9, "COL_ZEVLOR_LEVEL_8");
DB_CMB_LevelUpNpcInRegion(S_DEN_TieflingLeader_475200ee-cc3c-4dbe-84b1-1820c02ea26a, "END_Main", 9, "COL_ZEVLOR_LEVEL_8");
DB_CMB_LevelUpNpcInRegion(S_DEN_TieflingLeader_475200ee-cc3c-4dbe-84b1-1820c02ea26a, "END_Main", 11, "END_ZEVLOR_LEVEL_11");
DB_CMB_LevelUpNpcInRegion(S_GLO_Wulbren_2d70edbf-1a70-4047-8099-48f3e75d93bf, "CTY_Main_A", 11, "LOW_WULBREN_LEVEL_11");
DB_CMB_LevelUpNpcInRegion(S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b, "END_Main", 12, "END_MINTHARA_LEVEL_12");
DB_CMB_LevelUpNpcInRegion(S_GOB_ZhentarimGuard_Ranger_01_4b9818fa-cca6-4bad-b382-4c01334ef22a, "SCL_Main_A", 5, "MOO_ZHENTGUARD_LEVEL_5");
DB_CMB_LevelUpNpcInRegion(S_GOB_ZhentarimGuard_Ranger_02_afc5350d-dc9f-4808-b6ce-d7b1bb7c8229, "SCL_Main_A", 5, "MOO_ZHENTGUARD_LEVEL_5");
DB_CMB_LevelUpNpcInRegion(S_GOB_Quartermaster_646936f3-8d8d-484e-9361-cd1ed484c615, "SCL_Main_A", 6, "MOO_ROAH_LEVEL_6");
DB_CMB_LevelUpNpcInRegion(S_GLO_Nightsong_6c55edb0-901b-4ba4-b9e8-3475a8392d9b, "CTY_Main_A", 11, "LOW_NIGHTSONG_LEVEL_11");
DB_CMB_LevelUpNpcInRegion(S_GLO_Nightsong_6c55edb0-901b-4ba4-b9e8-3475a8392d9b, "END_Main", 11, "LOW_NIGHTSONG_LEVEL_11");
DB_CMB_LevelUpNpcInRegion(S_GLO_YoungLover_01_dd9178e7-1e3f-43bc-8a38-666dfcac7d0c, "SCL_Main_A", 3, "SCL_DANIS_LEVEL_3");
DB_CMB_LevelUpNpcInRegion(S_HAG_Hag_c457d064-83fb-4ec6-b74d-1f30dfafd12d, "CTY_Main_A", 11, "");
DB_RecruitableNpcHardCoreStatus(S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b, "HARD", "HEALTHBOOST_HARDCORE");
DB_RecruitableNpcHardCoreStatus(S_GOB_DrowCommander_25721313-0c15-4935-8176-9f134385451b, "EASY", "HEALTHREDUCTION_EASYMODE");
DB_Combat_Titan_DebilitatingStatusGroups("SG_Stunned");
DB_Combat_Titan_DebilitatingStatusGroups("SG_Incapacitated");
DB_Combat_Titan_DebilitatingStatusGroups("SG_Paralyzed");
NOT DB_Combat_Wraith_LightStatus(NULL_00000000-0000-0000-0000-000000000000, "", NULL_00000000-0000-0000-0000-000000000000);
DB_Combat_Wraith_LightStatusesToRemove("PRODUCE_FLAME");
DB_Combat_Wraith_LightStatusesToRemove("BURNING");
DB_Combat_Wraith_LightStatusesToRemove("BURNING_AZER");
DB_Combat_Wraith_LightStatusesToRemove("BURNING_HOLY");
DB_Combat_Wraith_LightStatusesToRemove("BURNING_TRAPWALL");
DB_Combat_Wraith_LightStatusesToRemove("MAG_INFERNAL_BURNING");
DB_Combat_Gortash_HeatMetal("HEAT_METAL");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_1");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_2");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_3");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_4");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_5");
DB_Combat_Gortash_HeatMetal("HEAT_METAL_6");
DB_Combat_Gortash_HeatMetalTargets(PUZ_Trap_Gortash_FocusedIncinerator_f743e5af-700e-44d6-a5bd-c4de7112f8ed);
DB_Combat_Gortash_HeatMetalTargets(PUZ_Trap_Gortash_GrenadeInstantiator_a0de8e02-cf75-41ed-a951-2a9da9483519);
DB_GLO_Spells_TimedExplosives(GRN_Bomb_Orthon_29d32b36-390f-4fe8-b27b-931393d76c2a, "EXPLOSIVE_MINE_ORTHON_DETONATE", 0, 0);
DB_GLO_Spells_TimedExplosives_Delayed("EXPLOSIVE_MINE_ORTHON_DETONATE", 800);
DB_Combat_TurretTempaltes(BLD_GEN_Arcane_Turret_A_Floating_A_a7ae5b16-c35e-4179-bc60-d8dd364dcd40);
DB_Combat_TurretTempaltes(BLD_GEN_Arcane_Turret_A_Floating_Activated_A_dc180f8b-9c3d-40e4-97f0-af6759781bcf);
DB_Combat_TurretTempaltes(LOW_RamazithTower_Arcane_Turret_A_Floating_Activated_A_f7b54c47-dc24-47b7-89a8-cfdf72b32354);

KBSECTION
IF
StatusApplied((GUIDSTRING)_Var1, "DEATHBURST_INTELLECTDEVOURER", _, _, (GUIDSTRING)_Var1)
THEN
DB_Combat_ExplodeOnDeath_ExcludeCharacter(_Var1);

IF
Died((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
GetTemplate(_Var1, _Var2, _Var1, _Var1, _Var1)
AND
DB_Combat_ExplodeOnDeath(_Var2, _, _, "Projectile_DeathBurst_IntellectDevourer", _Var1)
AND
GetDeathType(_Var1, _Var5, _Var1, _Var1, _Var1)
AND
_Var5 != "Chasm"
THEN
ApplyStatus(_Var1, "DEATHBURST_INTELLECTDEVOURER_DEATHTYPEOVERRIDE", -1, 1);

IF
StatusApplied((GUIDSTRING)_Var1, (STRING)_Var2, _, _, (GUIDSTRING)_Var1)
AND
DB_Combat_RemoveStatusOnLongRest(_Var2, _Var1, _Var1, _Var1, _Var1)
AND NOT
DB_Combat_RemoveStatusOnLongRest_Characters(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
DB_Combat_RemoveStatusOnLongRest_Characters(_Var1, _Var2);

IF
StatusRemoved((GUIDSTRING)_Var1, (STRING)_Var2, _, _, (GUIDSTRING)_Var1)
AND
DB_Combat_RemoveStatusOnLongRest(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
DB_Combat_RemoveStatusOnLongRest_Characters(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
NOT DB_Combat_RemoveStatusOnLongRest_Characters(_Var1, _Var2);

QRY
QRY_Combat_RemoveStatusOnLongRest_CheckTrigger((CHARACTER)_Var1, (STRING)_Var2, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND NOT
DB_Combat_RemoveStatusOnLongRest_TriggerException(_Var2, _, _Var1, _Var1, _Var1)
THEN
DB_NOOP(1);

QRY
QRY_Combat_RemoveStatusOnLongRest_CheckTrigger((GUIDSTRING)_Var1, (STRING)_Var2, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_RemoveStatusOnLongRest_TriggerException(_Var2, _Var3, _Var1, _Var1, _Var1)
AND NOT
DB_InRegion(_Var1, _Var3, _Var1, _Var1, _Var1)
THEN
DB_NOOP(1);

PROC
PROC_LongRest()
AND
DB_Combat_RemoveStatusOnLongRest_Characters(_Var1, _Var2, _Var1, _Var1, _Var1)
AND
QRY_Combat_RemoveStatusOnLongRest_CheckTrigger(_Var1, _Var2, _Var1, _Var1, _Var1)
AND
HasActiveStatus(_Var1, _Var2, 1, _Var1, _Var1)
THEN
RemoveStatus(_Var1, _Var2, NULL_00000000-0000-0000-0000-000000000000);

IF
CastedSpell((CHARACTER)_Var1, "Shout_LOW_Cazador_SwitchStance", _, _, _)
AND
GetEquippedItem(_Var1, "Melee Main Weapon", _Var5, _Var1, _Var1)
THEN
Unequip(_Var1, _Var5);
DebugText(_Var1, "Switched stance!");

IF
StatusRemoved((CHARACTER)_Var1, "LOW_CAZADORSPALACE_UNARMED_STANCE", _, _, (CHARACTER)_Var1)
THEN
Equip(_Var1, MAG_LC_CazadorVampiric_Quarterstaff_cf42b0d0-89d8-4756-b6d7-1e258dceeab0, 1);

IF
EntityEvent((ITEM)_Var1, "CMB_GortashGrenadeLauncher_ExplodeDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
THEN
RealtimeObjectTimerLaunch(_Var1, "CMB_GortashGrenadeLauncher_ExplodeDelay", 800);

IF
ObjectTimerFinished((ITEM)_Var1, "CMB_GortashGrenadeLauncher_ExplodeDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
AND
IsDestroyed(_Var1, 0, _Var1, _Var1, _Var1)
THEN
CreateExplosion(_Var1, "Projectile_WYR_Explosion_Trap_Gortash", 0, _Var1);
Die(_Var1);

IF
CastedSpell((ITEM)_Var1, "Zone_WYR_Incinerator_Gortash", _, _, _)
AND
HasActiveStatus(_Var1, "WYR_GORTASH_INCINERATOR_OVERHEATING", 1, _Var1, _Var1)
THEN
RealtimeObjectTimerLaunch(_Var1, "CMB_GortashIncinerator_ExplodeDelay", 800);

IF
CastedSpell((ITEM)_Var1, "Zone_WYR_Incinerator_Gortash", _, _, _)
AND
HasActiveStatus(_Var1, "WYR_GORTASH_INCINERATOR_OVERHEATING", 0, _Var1, _Var1)
THEN
ApplyStatus(_Var1, "WYR_GORTASH_INCINERATOR_OVERHEATING", 18);

IF
ObjectTimerFinished((ITEM)_Var1, "CMB_GortashIncinerator_ExplodeDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
AND
IsDestroyed(_Var1, 0, _Var1, _Var1, _Var1)
THEN
CreateExplosion(_Var1, "Projectile_WYR_Explosion_Trap_Gortash", 0, _Var1);
Die(_Var1);

IF
EntityEvent((GUIDSTRING)_Var1, "CMB_GortashIncinerator_AddToTurnOrder", (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
CanFight(_Var1, 0, _Var1, _Var1, _Var1)
THEN
SetCanJoinCombat(_Var1, 1);
PROC_SetCanFight(_Var1, 1);

IF
EntityEvent((GUIDSTRING)_Var1, "CMB_GortashIncinerator_RemoveFromTurnOrder", (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
CanFight(_Var1, 1, _Var1, _Var1, _Var1)
THEN
SetCanJoinCombat(_Var1, 0);
PROC_SetCanFight(_Var1, 0);
LeaveCombat(_Var1);

IF
LeftCombat(S_GLO_Gortash_b878a854-f790-4999-95c4-3f20f00f65ac, _, (GUIDSTRING)_, (GUIDSTRING)_, (GUIDSTRING)_)
THEN
RemoveStatus(S_GLO_Gortash_b878a854-f790-4999-95c4-3f20f00f65ac, "WYR_GORTASH_BANE_BUFF");

IF
StatusApplied((ITEM)_Var1, (STRING)_Var2, _, _, (ITEM)_Var1)
AND
DB_Combat_Gortash_HeatMetal(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
GetTemplate(_Var1, _Var5, _Var1, _Var1, _Var1)
AND
DB_Combat_Gortash_HeatMetalTargets(_Var5, _Var1, _Var1, _Var1, _Var1)
THEN
ApplyStatus(_Var1, "WYR_GORTASH_INCINERATOR_OVERHEATING", 18);

IF
StatusRemoved((GUIDSTRING)_Var1, "WYR_GORTASH_GRENADE_DETONATE", _, _, (GUIDSTRING)_Var1)
THEN
RealtimeObjectTimerLaunch(_Var1, "CMB_GortashGrenade_ExplodeDelay", 800);

IF
ObjectTimerFinished((ITEM)_Var1, "CMB_GortashGrenade_ExplodeDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
AND
IsDestroyed(_Var1, 0, _Var1, _Var1, _Var1)
THEN
Die(_Var1);

IF
StatusApplied((GUIDSTRING)_Var1, "TWN_TOLLCOLLECTOR_COINBOMB_DETONATE", _, _, (GUIDSTRING)_Var1)
THEN
SetCombatGroupID(_Var1, "d5e258fd-31ab-8045-a50b-9f3d22d7a0f2");
SetCanFight(_Var1, 1);

IF
AddedTo((ITEM)_Var1, (CHARACTER)_Var2, _, (ITEM)_Var1, (ITEM)_Var1)
AND
DB_Players(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
HasActiveStatus(_Var1, "TWN_TOLLCOLLECTOR_COINBOMB_DETONATE", 1, _Var1, _Var1)
THEN
RemoveStatus(_Var1, "TWN_TOLLCOLLECTOR_COINBOMB_DETONATE", NULL_00000000-0000-0000-0000-000000000000);

IF
StatusRemoved((GUIDSTRING)_Var1, "TWN_TOLLCOLLECTOR_COINBOMB_DETONATE", _, _, (GUIDSTRING)_Var1)
AND
IsInInventory(_Var1, 0, _Var1, _Var1, _Var1)
THEN
RealtimeObjectTimerLaunch(_Var1, "CMB_TollCollector_CoinBomb_ExplodeDelay", 800);

IF
ObjectTimerFinished((GUIDSTRING)_Var1, "CMB_TollCollector_CoinBomb_ExplodeDelay", (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
IsDestroyed(_Var1, 0, _Var1, _Var1, _Var1)
THEN
SetCanFight(_Var1, 0);
SetCombatGroupID(_Var1, "");
CreateExplosion(_Var1, "Projectile_CoinBomb_TollCollector_Explosion", 1, S_TWN_Tollhouse_TollhouseMaster_3b460226-8ca2-4bbc-9bd7-8bb947aa2c06);

IF
StatusRemoved((ITEM)_Var1, "TWN_TOLLCOLLECTOR_COINBOMB_DETONATE", _, _, (ITEM)_Var1)
AND
IsInInventory(_Var1, 1, _Var1, _Var1, _Var1)
THEN
SetCanFight(_Var1, 0);
SetCombatGroupID(_Var1, "");
RemoveStatus(_Var1, "AI_HELPER_AVOIDAREA_STRONG_RADIUS2");

IF
CastedSpell((CHARACTER)_Var1, "Shout_WYR_CallForHelp_Bane_Gortash", _, _, _)
AND
GetEquippedItem(_Var1, "Ranged Main Weapon", _Var5, _Var1, _Var1)
THEN
Unequip(_Var1, _Var5);
DebugText(_Var1, "Switched stance!");

IF
StatusRemoved((CHARACTER)_Var1, "WYR_GORTASH_BANE_BUFF", _, _, (CHARACTER)_Var1)
THEN
Equip(_Var1, MAG_WATCHER_Human_Crossbow_f746397f-c489-4121-8499-40017981e290, 1);

IF
StatusRemoved((GUIDSTRING)_Var1, "WYR_GORTASH_CRUSHINGFIST_HANGING", _, _, (GUIDSTRING)_Var1)
THEN
DebugText(_Var1, "Status Ticked Out!!");
RealtimeObjectTimerLaunch(_Var1, "CMB_GortashGrenade_ExplodeDelay", 800);

IF
ObjectTimerFinished((ITEM)_Var1, "CMB_GortashGrenade_ExplodeDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
THEN
DebugText(_Var1, "Boom!");
CreateExplosion(_Var1, "Projectile_WYR_CrushingFist_Gortash_FallingFist", 20, S_GLO_Gortash_b878a854-f790-4999-95c4-3f20f00f65ac);
Die(_Var1);

IF
UsingSpell((GUIDSTRING)_Var1, "Projectile_MineCluster_Orthon", _, _, (INTEGER)_Var4)
THEN
DB_CMB_OrthonBombDoScatter(_Var4, _Var1);

IF
UsingSpell((GUIDSTRING)_Var1, "Projectile_MineCluster_Orthon_Hardcore", _, _, (INTEGER)_Var4)
THEN
DB_CMB_OrthonBombDoScatter(_Var4, _Var1);

IF
StatusAttempt((ITEM)_Var1, "EXPLOSIVE_MINE_ORTHON", (GUIDSTRING)_Var2, (INTEGER)_Var3, (ITEM)_Var1)
AND
DB_CMB_OrthonBombDoScatter(_Var3, _, _Var1, _Var1, _Var1)
AND
GetPosition(_Var1, _Var5, _Var6, _Var7, _Var1)
THEN
ScatterAt(_Var1, _Var5, _Var6, _Var7, 6);

IF
TurnEnded((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_CMB_OrthonBombDoScatter(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
NOT DB_CMB_OrthonBombDoScatter(_Var2, _Var1);

IF
StatusApplied((ITEM)_Var1, "EXPLOSIVE_MINE_ORTHON", (GUIDSTRING)_Var2, _, (ITEM)_Var1)
THEN
EnterCombat(_Var1, _Var2);
ApplyStatus(_Var1, "EXPLOSIVE_MINE_ORTHON_TECHNICAL", -1, 1, _Var2);

IF
StatusApplied((CHARACTER)_Var1, "ORTHON_LAUGH", _, _, (CHARACTER)_Var1)
AND NOT
DB_Defeated(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
IsTagged(S_GLO_Orthon_1dc8091d-2af6-4d33-9268-998ef266d19c, ACT3_HOH_ORTHON_SPELL_LIMIT_5f13326a-be94-4ca9-926b-8d6bec318ab0, 0, _Var1, _Var1)
THEN
UseSpell(_Var1, "ProjectileStrike_ExplosiveRetribution", _Var1);

IF
LeftCombat((GUIDSTRING)_Var1, _, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
HasActiveStatus(_Var1, "ORTHON_LAUGH", 1, _Var1, _Var1)
THEN
RemoveStatus(_Var1, "ORTHON_LAUGH");

IF
StatusAttempt((ITEM)_Var1, "EXPLOSIVE_MINE_ORTHON", _, _, (ITEM)_Var1)
THEN
DB_CMB_OrthonMines(_Var1);

IF
DestroyedBy((ITEM)_Var1, _, _, _, (ITEM)_Var1)
AND
DB_CMB_OrthonMines(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
NOT DB_CMB_OrthonMines(_Var1);

IF
CombatEnded((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_CMB_OrthonMines(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
DB_Was_InCombat(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
DB_Players(_Var3, _Var1, _Var1, _Var1, _Var1)
AND NOT
DB_Is_InCombat(_Var3, _, _Var1, _Var1, _Var1)
AND
IsInForceTurnBasedMode(_Var3, 0, _Var1, _Var1, _Var1)
AND
GetDistanceTo(_Var3, _Var2, _Var5, _Var1, _Var1)
AND
_Var5 <= 10
THEN
ForceTurnBasedMode(_Var3, 1);

IF
StatusApplied((GUIDSTRING)_Var1, "MOO_DEATHBLOOM_SPAWN", _, _, (GUIDSTRING)_Var1)
AND
QRY_GetSummonOwner(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
DB_QRYRTN_GetSummonOwner(_Var4, _Var1, _Var1, _Var1, _Var1)
AND
GetFaction(_Var4, _Var5, _Var1, _Var1, _Var1)
AND
GetCombatGroupID(_Var4, _Var6, _Var1, _Var1, _Var1)
THEN
DB_Combat_DeathBloom(_Var1, _Var4, _Var5, _Var6);

IF
StatusRemoved((GUIDSTRING)_Var1, "MOO_DEATHBLOOM_SPAWN", _, _, (GUIDSTRING)_Var1)
AND
IsDestroyed(_Var1, 1, _Var1, _Var1, _Var1)
AND
DB_Combat_DeathBloom(_Var1, _Var4, _Var5, _Var6, _Var1)
THEN
NOT DB_Combat_DeathBloom(_Var1, _Var4, _Var5, _Var6);

IF
StatusRemoved((GUIDSTRING)_Var1, "MOO_DEATHBLOOM_SPAWN", _, _, (GUIDSTRING)_Var1)
AND
IsDestroyed(_Var1, 0, _Var1, _Var1, _Var1)
THEN
SetDetached(_Var1, 1);
CreateExplosion(_Var1, "Projectile_MOO_DeathBloom_Explosion", 1);
RealtimeObjectTimerLaunch(_Var1, "CMB_DeathBloom_SpawnDelay", 200);
RealtimeObjectTimerLaunch(_Var1, "CMB_DeathBloom_DestroyDelay", 900);

IF
ObjectTimerFinished((GUIDSTRING)_Var1, "CMB_DeathBloom_SpawnDelay", (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
THEN
PROC_CMB_CreateNecromite(_Var1);

PROC
PROC_CMB_CreateNecromite((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
CreateAtObject(Quest_COL_Necromite_Summon_fec67606-9665-4942-b5bb-c211e2e03499, _Var1, 0, 1, "", 1, _Var2, _Var1, _Var1, _Var1)
THEN
DB_Combat_DeathBloom_SpawnedNecromite(_Var2, _Var1);

IF
EnteredLevel((GUIDSTRING)_Var1, _, _, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_DeathBloom_SpawnedNecromite(_Var1, _Var4, _Var1, _Var1, _Var1)
AND
DB_Combat_DeathBloom(_Var4, _Var5, _Var6, _Var7, _Var1)
THEN
SetFaction(_Var1, _Var6);
SetCombatGroupID(_Var1, _Var7);
EnterCombat(_Var1, _Var5);
NOT DB_Combat_DeathBloom(_Var4, _Var5, _Var6, _Var7);
NOT DB_Combat_DeathBloom_SpawnedNecromite(_Var1, _Var4);

IF
ObjectTimerFinished((GUIDSTRING)_Var1, "CMB_DeathBloom_DestroyDelay", (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
THEN
Die(_Var1);

IF
DB_Combat_Dragon_HitProxies(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
CharacterDisableAllCrimes(_Var1);
SetImmortal(_Var1, 1);
PROC_SetOnStage(_Var1, 0);

PROC
PROC_Combat_Dragon_ProxySetup((STRING)_Var1, (STRING)_Var1, (STRING)_Var1, (STRING)_Var1, (STRING)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
DB_Combat_Dragon_HitProxies(_Var3, _Var1, _Var1, _Var1, _Var1)
AND
GetFaction(_Var2, _Var4, _Var1, _Var1, _Var1)
AND
GetPosition(_Var2, _Var5, _Var6, _Var7, _Var1)
AND
GetPosition(_Var3, _Var8, _Var9, _Var10, _Var1)
AND
RealSubtract(_Var8, _Var5, _Var11, _Var1, _Var1)
AND
RealSubtract(_Var9, _Var6, _Var12, _Var1, _Var1)
AND
RealSubtract(_Var10, _Var7, _Var13, _Var1, _Var1)
THEN
DB_Combat_Dragon_HitProxies(_Var3, _Var1, _Var2, _Var11, _Var12, _Var13);
SetFaction(_Var3, _Var4);
AttachHitProxy(_Var2, _Var3);
PROC_SelfHealing_Disable(_Var3);

PROC
PROC_Combat_Dragon_ProxySetup((STRING)_Var1, (STRING)_Var1, (STRING)_Var1, (STRING)_Var1, (STRING)_Var1)
AND
DB_Combat_Dragon_HitProxies(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_SetOnStage(_Var2, 1);

PROC
PROC_Combat_Dragon_ProxySetup((STRING)_Var1, (STRING)_Var1, (STRING)_Var1, (STRING)_Var1, (STRING)_Var1)
THEN
PROC_Combat_DragonHitProxy_UpdatePositions();

PROC
PROC_Combat_Dragon_ShowAllProxies((CHARACTER)_Var1, (STRING)_Var2, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_HitProxies(_Var3, _Var2, _Var1, _Var1, _Var1)
AND
IsOnStage(_Var3, 0, _Var1, _Var1, _Var1)
THEN
PROC_SetOnStage(_Var3, 1);

PROC
PROC_Combat_Dragon_HideAllProxies((CHARACTER)_Var1, (STRING)_Var2, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_HitProxies(_Var3, _Var2, _Var1, _Var1, _Var1)
AND
IsOnStage(_Var3, 1, _Var1, _Var1, _Var1)
THEN
PROC_SetOnStage(_Var3, 0);

IF
WentOnStage((CHARACTER)_Var1, 0, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Dragon_HideAllProxies(_Var1, _Var2);

IF
WentOnStage((CHARACTER)_Var1, 1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Dragon_ShowAllProxies(_Var1, _Var2);
PROC_Combat_DragonHitProxy_UpdatePositions();

PROC
PROC_Combat_DragonHitProxy_UpdatePositions()
AND
DB_Combat_Dragon_HitProxies(_Var1, _Var2, _Var3, _Var4, _Var5, _Var6, _Var1, _Var1, _Var1, _Var1)
AND
GetWorldTransformFromLocal(_Var3, _Var4, _Var5, _Var6, 0, 0, 0, _Var7, _Var8, _Var9, _, _, _, _Var1, _Var1)
THEN
TeleportToPosition(_Var1, _Var7, _Var8, _Var9, "", 0);

IF
CastedSpell((CHARACTER)_Var1, _, _, _, (INTEGER)_Var5)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var6, _Var1, _Var1, _Var1)
THEN
PROC_Combat_DragonHitProxy_UpdatePositions();

IF
TurnEnded((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
PROC_Combat_DragonHitProxy_UpdatePositions();

IF
StatusApplied((CHARACTER)_Var1, "BANISHED", _, _, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var4, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Dragon_HideAllProxies(_Var1, _Var4);

IF
StatusRemoved((CHARACTER)_Var1, "BANISHED", _, _, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var4, _Var1, _Var1, _Var1)
AND
HasActiveStatusWithGroup(_Var1, "SG_Polymorph", 0, _Var1, _Var1)
THEN
PROC_Combat_Dragon_ShowAllProxies(_Var1, _Var4);

IF
StatusApplied((CHARACTER)_Var1, (STRING)_Var2, _, _, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var5, _Var1, _Var1, _Var1)
AND
IsStatusFromGroup(_Var2, "SG_Polymorph", 1, _Var1, _Var1)
THEN
PROC_Combat_Dragon_HideAllProxies(_Var1, _Var5);

IF
StatusRemoved((CHARACTER)_Var1, (STRING)_Var2, _, _, (CHARACTER)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var5, _Var1, _Var1, _Var1)
AND
IsStatusFromGroup(_Var2, "SG_Polymorph", 1, _Var1, _Var1)
AND
HasActiveStatusWithGroup(_Var1, "SG_Polymorph", 0, _Var1, _Var1)
THEN
PROC_Combat_Dragon_ShowAllProxies(_Var1, _Var5);
PROC_Combat_DragonHitProxy_UpdatePositions();

IF
Died((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Dragon_ProxyOwner(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Dragon_HideAllProxies(_Var1, _Var2);

IF
TurnStarted((ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
AND
HasActiveStatus(_Var1, "OBLITERATIONORB_AURA", 1, _Var1, _Var1)
THEN
RealtimeObjectTimerLaunch(_Var1, "CMB_NetherbrainObliterationOrb_ExplodeDelay", 1200);
RealtimeObjectTimerLaunch(_Var1, "CMB_NetherbrainObliterationOrb_RemoveDelay", 3200);

IF
ObjectTimerFinished((ITEM)_Var1, "CMB_NetherbrainObliterationOrb_ExplodeDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
THEN
RemoveStatus(_Var1, "OBLITERATIONORB_AURA");
CreateExplosion(_Var1, "Projectile_ObliterationOrb_Netherbrain_Explosion", -1, _Var1);

IF
ObjectTimerFinished((ITEM)_Var1, "CMB_NetherbrainObliterationOrb_RemoveDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
THEN
Die(_Var1);

IF
EnteredCombat(S_SCL_Drider_aa59ce01-3d2e-42e8-a539-c07e0ea292ab, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
THEN
ApplyStatus(S_SCL_Drider_aa59ce01-3d2e-42e8-a539-c07e0ea292ab, "DRIDER_LEADERSHIP_AURA", -1, 1);

IF
LeftCombat(S_SCL_Drider_aa59ce01-3d2e-42e8-a539-c07e0ea292ab, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
THEN
RemoveStatus(S_SCL_Drider_aa59ce01-3d2e-42e8-a539-c07e0ea292ab, "DRIDER_LEADERSHIP_AURA", NULL_00000000-0000-0000-0000-000000000000);

IF
StatusApplied((CHARACTER)_Var1, (STRING)_Var2, (GUIDSTRING)_Var3, _, (CHARACTER)_Var1)
AND
DB_Combat_NegativeAbilityScoreStatus(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
DB_Combat_Ability(_Var5, _Var1, _Var1, _Var1, _Var1)
AND
GetAbility(_Var1, _Var5, _Var6, _Var1, _Var1)
AND
_Var6 <= 0
THEN
ApplyStatus(_Var1, "ABILITYSCORE_DEATH", -1, 0, _Var3);
Die(_Var1, 0, _Var3, 0, 1, 0);

IF
UsingSpellOnTarget((GUIDSTRING)_Var1, (GUIDSTRING)_Var2, "Projectile_LOW_WatcherTitan_DummyHellfireMissiles", _, _, (INTEGER)_Var5, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
CreateAtObject(Helper_Invisible_A_4cc75168-a81e-4a5c-85cd-1bab8d7bb641, _Var2, 0, 0, "LOW_SteelWatchFoundery_TitanTarget_Created", 1, _Var6, _Var1, _Var1, _Var1)
THEN
SetCanJoinCombat(_Var6, 0);
SetCanFight(_Var6, 0);
ApplyStatus(_Var6, "LOW_STEELWATCHFOUNDRY_TITAN_TARGETAREA", -1, 1, NULL_00000000-0000-0000-0000-000000000000);
DB_TestMissileID(_Var1, _Var6);

IF
TurnStarted((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_TestMissileID(_Var1, _Var2, _Var1, _Var1, _Var1)
AND
QRY_Combat_TitanIncapacitated(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Titan_TargetHide(_Var2);

IF
TurnStarted((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_TestMissileID(_Var1, _Var2, _Var1, _Var1, _Var1)
AND NOT
QRY_Combat_TitanIncapacitated(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
SetEntityEventReal(_Var1, "GLO_CombatWait", 1);
RealtimeObjectTimerLaunch(_Var1, "LOW_SteelWatchFoundry_TestMissiles", 1000);

QRY
QRY_Combat_TitanIncapacitated((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_Combat_Titan_DebilitatingStatusGroups(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
HasActiveStatusWithGroup(_Var1, _Var2, 1, _Var1, _Var1)
THEN
DB_NOOP(1);

IF
ObjectTimerFinished((GUIDSTRING)_Var1, "LOW_SteelWatchFoundry_TestMissiles", (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_TestMissileID(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
UseSpell(_Var1, "ProjectileStrike_SteelWatcher_Quadruped_HellfireMissiles", _Var2);

IF
CastedSpell((GUIDSTRING)_Var1, "ProjectileStrike_SteelWatcher_Quadruped_HellfireMissiles", _, _, _)
AND
DB_TestMissileID(_Var1, _Var5, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Titan_TargetHide(_Var5);

IF
StatusRemoved((GUIDSTRING)_Var1, "BULWARK_MODE", _, _, (GUIDSTRING)_Var1)
AND
DB_TestMissileID(_Var1, _Var4, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Titan_TargetHide(_Var4);

PROC
PROC_Combat_Titan_TargetHide((ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
AND
DB_TestMissileID(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
RemoveStatus(_Var1, "LOW_STEELWATCHFOUNDRY_TITAN_TARGETAREA", NULL_00000000-0000-0000-0000-000000000000);
DB_Combat_Titan_TargetToDelete(_Var2, _Var1);
NOT DB_TestMissileID(_Var2, _Var1);

IF
TurnStarted((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Titan_TargetToDelete(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
NOT DB_Combat_Titan_TargetToDelete(_Var1, _Var2);
RequestDelete(_Var2);

IF
DB_PermaDefeated(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
DB_TestMissileID(_Var1, _, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Titan_CleanUpTargeting();

PROC
PROC_Combat_Titan_CleanUpTargeting()
AND
DB_TestMissileID(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Titan_TargetHide(_Var2);

PROC
PROC_Combat_Titan_CleanUpTargeting()
AND
DB_Combat_Titan_TargetToDelete(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
NOT DB_Combat_Titan_TargetToDelete(_Var1, _Var2);
RequestDelete(_Var2);

IF
CombatEnded((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_TestMissileID(_Var2, _, _Var1, _Var1, _Var1)
AND
QRY_GLO_IsOrWasInCombat(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Titan_CleanUpTargeting();

IF
EnteredLevel((GUIDSTRING)_Var1, _, (STRING)_Var3, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_CMB_LevelUpNpcInRegion(_Var1, _Var3, _Var4, _Var5, _Var1)
AND NOT
DB_Players(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
_Var5 != ""
AND
HasActiveStatus(_Var1, _Var5, 0, _Var1, _Var1)
THEN
NOT DB_CMB_LevelUpNpcInRegion(_Var1, _Var3, _Var4, _Var5);
SetLevel(_Var1, _Var4);
ApplyStatus(_Var1, _Var5, -1, 1);

IF
EnteredLevel((GUIDSTRING)_Var1, _, (STRING)_Var3, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_CMB_LevelUpNpcInRegion(_Var1, _Var3, _Var4, _Var5, _Var1)
AND NOT
DB_Players(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
_Var5 == ""
THEN
NOT DB_CMB_LevelUpNpcInRegion(_Var1, _Var3, _Var4, _Var5);
SetLevel(_Var1, _Var4);

IF
StatusRemoved((GUIDSTRING)_Var1, "BULWARK_MODE", _, _, (GUIDSTRING)_Var1)
THEN
SetEntityEventReal(_Var1, "GLO_CombatWait", 1);

IF
TurnStarted((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
HasActiveStatus(_Var1, "WYR_LIGHTNINGSTRIKE_TARGET", 1, _Var1, _Var1)
THEN
RealtimeObjectTimerLaunch(_Var1, "CMB_LightningStrike_ExplodeDelay", 800);
RealtimeObjectTimerLaunch(_Var1, "CMB_LightningStrike_RemoveDelay", 1800);

IF
ObjectTimerFinished((ITEM)_Var1, "CMB_LightningStrike_ExplodeDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
THEN
RemoveStatus(_Var1, "WYR_LIGHTNINGSTRIKE_TARGET");
CreateExplosion(_Var1, "ProjectileStrike_WYR_LightningStrike", 3);

IF
ObjectTimerFinished((ITEM)_Var1, "CMB_LightningStrike_RemoveDelay", (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
THEN
Die(_Var1);

IF
DB_Combat_DifficultyItems(_Var1, _Var2, _Var3, _Var1, _Var1)
AND
CheckRulesetModifierString(cac2d8bd-c197-4a84-9df1-f86f54ad4521, _Var3, 1, _Var1, _Var1)
THEN
ApplyStatus(_Var1, _Var2, -1);

IF
RulesetModifierChangedString(cac2d8bd-c197-4a84-9df1-f86f54ad4521, _, (STRING)_Var2, _, _)
AND
DB_Combat_DifficultyItems(_Var3, _Var4, _Var2, _, _)
AND
HasActiveStatus(_Var3, _Var4, 0, _, _)
THEN
ApplyStatus(_Var3, _Var4, -1);

IF
RulesetModifierChangedString(cac2d8bd-c197-4a84-9df1-f86f54ad4521, _, (STRING)_Var2, _, _)
AND
DB_Combat_DifficultyItems(_Var3, _Var4, _Var5, _, _)
AND
_Var2 != _Var5
AND
HasActiveStatus(_Var3, _Var4, 1, _, _)
THEN
RemoveStatus(_Var3, _Var4);

IF
DB_PermaDefeated(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
DB_Combat_DifficultyItems(_Var1, _Var2, _Var3, _Var1, _Var1)
THEN
NOT DB_Combat_DifficultyItems(_Var1, _Var2, _Var3);

IF
StatusApplied((GUIDSTRING)_Var1, "AURA_OF_VILEOBLIVION_BUFF", _, _, (GUIDSTRING)_Var1)
THEN
DB_Combat_Wraith_InOblivionAura(_Var1);

IF
StatusRemoved((GUIDSTRING)_Var1, "AURA_OF_VILEOBLIVION_BUFF", _, _, (GUIDSTRING)_Var1)
THEN
NOT DB_Combat_Wraith_InOblivionAura(_Var1);

IF
StatusApplied((GUIDSTRING)_Var1, (STRING)_Var2, (GUIDSTRING)_Var3, _, (GUIDSTRING)_Var1)
AND
IsStatusFromGroup(_Var2, "SG_Light", 1, _Var1, _Var1)
THEN
DB_Combat_Wraith_LightStatus(_Var1, _Var2, _Var3);

IF
StatusApplied((GUIDSTRING)_Var1, (STRING)_Var2, (GUIDSTRING)_Var3, _, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_LightStatusesToRemove(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
DB_Combat_Wraith_LightStatus(_Var1, _Var2, _Var3);

IF
DB_Combat_Wraith_InOblivionAura(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Var1);

IF
StatusApplied((GUIDSTRING)_Var1, (STRING)_Var2, _, _, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_InOblivionAura(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
DB_Combat_Wraith_LightStatusesToRemove(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Var1);

IF
StatusApplied((GUIDSTRING)_Var1, (STRING)_Var2, _, _, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_InOblivionAura(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
IsStatusFromGroup(_Var2, "SG_Light", 1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Var1);

IF
TagSet((GUIDSTRING)_Var1, SPELLLIGHTOBJECT_292e7f29-ff10-462d-8be9-94ddd18970ea, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_InOblivionAura(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Var1);

IF
Equipped((ITEM)_Var1, (CHARACTER)_Var2, (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
AND
DB_Combat_Wraith_InOblivionAura(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Var2);

PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_LightStatus(_Var1, _, _, _Var1, _Var1)
THEN
PROC_Combat_Wraith_LightRemoved(_Var1);

PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
THEN
RemoveStatusesWithGroup(_Var1, "SG_Light");

PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_LightStatusesToRemove(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
RemoveStatus(_Var1, _Var2);

PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
IsCharacter(_Var1, 1, _Var1, _Var1, _Var1)
AND
DB_EquippedItemSlots(_Var2, _Var1, _Var1, _Var1, _Var1)
AND
GetEquippedItem(_Var1, _Var2, _Var3, _Var1, _Var1)
THEN
PROC_Combat_Wraith_RemoveLightStatuses(_Var3);

PROC
PROC_Combat_Wraith_RemoveLightStatuses((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
IsTagged(_Var1, SPELLLIGHTOBJECT_292e7f29-ff10-462d-8be9-94ddd18970ea, 1, _Var1, _Var1)
THEN
ApplyStatus(_Var1, "AURA_OF_VILEOBLIVION_FEEDBACK", -1, 1);
Die(_Var1, 0, 00000000-0000-0000-0000-000000000000, 0, 0);

PROC
PROC_Combat_Wraith_LightRemoved((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
QRY_Combat_Wraith_GetOwnerOrSelf(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
DB_QRYRTN_Combat_Wraith_Owner(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_LightRemoved_Internal(_Var1, _Var2);
ApplyStatus(_Var2, "AURA_OF_VILEOBLIVION_FEEDBACK", -1, 1);

PROC
PROC_Combat_Wraith_LightRemoved_Internal((GUIDSTRING)_Var1, (GUIDSTRING)_Var2, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_LightStatus(_Var1, _Var3, _Var4, _Var1, _Var1)
AND
HasAppliedStatus(_Var1, _Var3, 1, _Var1, _Var1)
AND
GetStatusCurrentLifetime(_Var1, _Var3, _Var5, _Var1, _Var1)
THEN
DB_Combat_Wraith_LightStatusToReapply(_Var2, _Var1, _Var3, _Var4, _Var5);

PROC
PROC_Combat_Wraith_LightRemoved_Internal((GUIDSTRING)_Var1, (GUIDSTRING)_Var2, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_LightStatus(_Var1, _Var3, _Var4, _Var1, _Var1)
THEN
NOT DB_Combat_Wraith_LightStatus(_Var1, _Var3, _Var4);

QRY
QRY_Combat_Wraith_GetOwnerOrSelf((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_QRYRTN_Combat_Wraith_Owner(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
NOT DB_QRYRTN_Combat_Wraith_Owner(_Var2);

QRY
QRY_Combat_Wraith_GetOwnerOrSelf((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
IsItem(_Var1, 1, _Var1, _Var1, _Var1)
AND
IsInInventory(_Var1, 1, _Var1, _Var1, _Var1)
AND
GetInventoryOwner(_Var1, _Var2, _Var1, _Var1, _Var1)
THEN
DB_QRYRTN_Combat_Wraith_Owner(_Var2);

QRY
QRY_Combat_Wraith_GetOwnerOrSelf((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND NOT
DB_QRYRTN_Combat_Wraith_Owner(_, _Var1, _Var1, _Var1, _Var1)
THEN
DB_QRYRTN_Combat_Wraith_Owner(_Var1);

IF
StatusRemoved((GUIDSTRING)_Var1, (STRING)_Var2, _, _, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_LightStatus(_Var1, _Var2, _Var5, _Var1, _Var1)
THEN
NOT DB_Combat_Wraith_LightStatus(_Var1, _Var2, _Var5);

IF
StatusRemoved((ITEM)_Var1, "AURA_OF_VILEOBLIVION_BUFF", _, _, (ITEM)_Var1)
AND
DB_Combat_Wraith_LightStatusToReapply(_Var4, _Var1, _Var5, _Var6, _Var7)
AND
IsEquipped(_Var1, 1, _Var1, _Var1, _Var1)
AND
GetInventoryOwner(_Var1, _Var4, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_ObjectLeftBlightedArea(_Var1);

IF
StatusRemoved((ITEM)_Var1, "AURA_OF_VILEOBLIVION_BUFF", _, _, (ITEM)_Var1)
AND
DB_Combat_Wraith_LightStatusToReapply(_Var4, _Var1, _Var5, _Var6, _Var7)
AND
IsInInventoryOf(_Var1, _Var4, 1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_ObjectLeftBlightedArea(_Var1);

IF
StatusRemoved((GUIDSTRING)_Var1, "AURA_OF_VILEOBLIVION_BUFF", _, _, (GUIDSTRING)_Var1)
AND NOT
DB_Combat_Wraith_InOblivionAura(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_Combat_Wraith_ObjectLeftBlightedArea(_Var1);

PROC
PROC_Combat_Wraith_ObjectLeftBlightedArea((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_InOblivionAura(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
NOT DB_Combat_Wraith_InOblivionAura(_Var1);

PROC
PROC_Combat_Wraith_ObjectLeftBlightedArea((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Combat_Wraith_InOblivionAura(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
NOT DB_Combat_Wraith_InOblivionAura(_Var1);

PROC
PROC_Combat_Wraith_ObjectLeftBlightedArea((ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1, (ITEM)_Var1)
AND
DB_Combat_Wraith_LightStatusToReapply(_Var2, _Var1, _Var3, _Var4, _Var5)
THEN
ApplyStatus(_Var1, _Var3, _Var5, 1, _Var4);
NOT DB_Combat_Wraith_LightStatusToReapply(_Var2, _Var1, _Var3, _Var4, _Var5);

IF
CharacterDisarmed((GUIDSTRING)_Var1, (GUIDSTRING)_Var2, _, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Players(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
GetPosition(_Var1, _Var4, _Var5, _Var6, _Var1)
THEN
ApplyStatus(_Var2, "ITEM_SHIMMER_DISARMED", -1, 1);
ScatterAt(_Var2, _Var4, _Var5, _Var6, 3);
DB_CMB_PlayerWeaponDisarmed(_Var2, _Var1);

IF
ScatteredAt((GUIDSTRING)_Var1, (REAL)_Var2, (REAL)_Var3, (REAL)_Var4, (GUIDSTRING)_Var1)
AND
DB_CMB_PlayerWeaponDisarmed(_Var1, _Var5, _Var1, _Var1, _Var1)
THEN
RequestPing(_Var2, _Var3, _Var4, _Var1, _Var5);

IF
AddedTo((GUIDSTRING)_Var1, _, _, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_CMB_PlayerWeaponDisarmed(_Var1, _Var4, _Var1, _Var1, _Var1)
THEN
RemoveStatus(_Var1, "ITEM_SHIMMER_DISARMED");
NOT DB_CMB_PlayerWeaponDisarmed(_Var1, _Var4);

IF
StatusRemoved((CHARACTER)_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", _, _, (CHARACTER)_Var1)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
AND
HasActiveStatus(_Var1, "BANISHED", 0, _Var1, _Var1)
AND
HasActiveStatus(_Var1, "BANISHING_SMITE", 0, _Var1, _Var1)
AND
HasActiveStatus(_Var1, "BANISHING_SMITE_RANGED", 0, _Var1, _Var1)
AND
HasActiveStatus(_Var1, "RESILIENT_SPHERE", 0, _Var1, _Var1)
THEN
PROC_SetInvulnerable(_Var1, 0);
UseSpell(_Var1, "Projectile_SteelWatcher_Biped_SelfDestructExplosion", _Var1, NULL_00000000-0000-0000-0000-000000000000);

IF
CastedSpell((GUIDSTRING)_Var1, "Projectile_SteelWatcher_Biped_SelfDestructExplosion", _, _, _)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
THEN
Die(_Var1, 0, _Var1, 1, 1, 1);

IF
StatusRemoved((CHARACTER)_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", _, _, (CHARACTER)_Var1)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
AND
HasActiveStatus(_Var1, "RESILIENT_SPHERE", 1, _Var1, _Var1)
THEN
PROC_SetInvulnerable(_Var1, 0);
UseSpell(_Var1, "Projectile_SteelWatcher_Biped_SelfDestructExplosion_NoDamage", _Var1, NULL_00000000-0000-0000-0000-000000000000);

IF
CastedSpell((GUIDSTRING)_Var1, "Projectile_SteelWatcher_Biped_SelfDestructExplosion_NoDamage", _, _, _)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
THEN
Die(_Var1, 0, _Var1, 1, 1, 1);

IF
StatusRemoved((CHARACTER)_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", _, _, (CHARACTER)_Var1)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
AND
QRY_GLO_IsBanished(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_SetInvulnerable(_Var1, 0);
Die(_Var1, 0, _Var1, 1, 1, 1);

QRY
QRY_GLO_IsBanished((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
HasActiveStatus(_Var1, "BANISHED", 1, _Var1, _Var1)
THEN
DB_NOOP(1);

QRY
QRY_GLO_IsBanished((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
HasActiveStatus(_Var1, "BANISHING_SMITE", 1, _Var1, _Var1)
THEN
DB_NOOP(1);

QRY
QRY_GLO_IsBanished((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
HasActiveStatus(_Var1, "BANISHING_SMITE_RANGED", 1, _Var1, _Var1)
THEN
DB_NOOP(1);

IF
StatusRemoved((CHARACTER)_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN_DEATHWARD", _, _, (CHARACTER)_Var1)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
AND
HasActiveStatus(_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", 0, _Var1, _Var1)
THEN
PROC_SetInvulnerable(_Var1, 1);
UseSpell(_Var1, "Shout_SteelWatcher_Biped_SelfDestruct_Begin", _Var1, NULL_00000000-0000-0000-0000-000000000000);

IF
CastedSpell((GUIDSTRING)_Var1, "Shout_SteelWatcher_Biped_SelfDestruct_Begin", _, _, _)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
THEN
PROC_SetInvulnerable(_Var1, 0);

IF
CastSpellFailed((GUIDSTRING)_Var1, "Shout_SteelWatcher_Biped_SelfDestruct_Begin", _, _, _)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
THEN
PROC_SetInvulnerable(_Var1, 0);
ApplyStatus(_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", 6, 1, _Var1);

IF
TurnEnded((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
AND
GetHitpointsPercentage(_Var1, _Var2, _Var1, _Var1, _Var1)
AND
_Var2 < 30
AND
HasActiveStatus(_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN_DEATHWARD", 0, _Var1, _Var1)
AND
HasActiveStatus(_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", 0, _Var1, _Var1)
AND NOT
DB_Dead(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_SetInvulnerable(_Var1, 0);
ApplyStatus(_Var1, "STEELWATCHER_BIPED_SELFDESTRUCT_BEGIN", 6, 1, _Var1);

IF
AttackedBy((CHARACTER)_Var1, _, _, _, _, _, _, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
IsTagged(_Var1, STEEL_WATCHER_BIPED_6427d19c-0b93-4079-b76f-2647945081c5, 1, _Var1, _Var1)
AND
HasActiveStatusWithGroup(_Var1, "SG_Incapacitated", 1, _Var1, _Var1)
AND NOT
QRY_GLO_IsBanished(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
GetHitpointsPercentage(_Var1, _Var8, _Var1, _Var1, _Var1)
AND
_Var8 < 30
THEN
RemoveStatusesWithGroup(_Var1, "SG_Incapacitated", NULL_00000000-0000-0000-0000-000000000000);
PROC_SetInvulnerable(_Var1, 1);
UseSpell(_Var1, "Shout_SteelWatcher_Biped_SelfDestruct_Begin", _Var1, NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_RecruitableNpcHardCoreStatus_Add((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND NOT
DB_PartOfTheTeam(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
DB_RecruitableNpcHardCoreStatus(_Var1, _Var2, _Var3, _Var1, _Var1)
AND
CheckRulesetModifierString(cac2d8bd-c197-4a84-9df1-f86f54ad4521, _Var2, 1, _Var1, _Var1)
AND
HasActiveStatus(_Var1, _Var3, 0, _Var1, _Var1)
THEN
ApplyStatus(_Var1, _Var3, -1, 1);

PROC
PROC_RecruitableNpcHardCoreStatus_Remove((CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1, (CHARACTER)_Var1)
AND
DB_RecruitableNpcHardCoreStatus(_Var1, _, _Var3, _Var1, _Var1)
AND
HasActiveStatus(_Var1, _Var3, 1, _Var1, _Var1)
THEN
RemoveStatus(_Var1, _Var3);

IF
RulesetModifierChangedString(cac2d8bd-c197-4a84-9df1-f86f54ad4521, (STRING)_Var1, (STRING)_Var2, (STRING)_Var1, (STRING)_Var1)
AND
_Var1 != _Var2
AND
DB_RecruitableNpcHardCoreStatus(_Var3, _, _, _Var1, _Var1)
THEN
PROC_RecruitableNpcHardCoreStatus_Remove(_Var3);
PROC_RecruitableNpcHardCoreStatus_Add(_Var3);

IF
EnteredLevel((GUIDSTRING)_Var1, _, _, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
DB_Origins(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_RecruitableNpcHardCoreStatus_Add(_Var1);

IF
DB_PartOfTheTeam(_Var1, _Var1, _Var1, _Var1, _Var1)
THEN
PROC_RecruitableNpcHardCoreStatus_Remove(_Var1);

PROC
PROC_Origins_CompanionLeavePermanently((GUIDSTRING)_Var1, _, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
THEN
PROC_RecruitableNpcHardCoreStatus_Add(_Var1);

IF
DB_PermaDefeated(_Var1, _Var1, _Var1, _Var1, _Var1)
AND
DB_RecruitableNpcHardCoreStatus(_Var1, _Var2, _Var3, _Var1, _Var1)
THEN
NOT DB_RecruitableNpcHardCoreStatus(_Var1, _Var2, _Var3);

IF
Dying((GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1, (GUIDSTRING)_Var1)
AND
GetTemplate(_Var1, _Var2, _Var1, _Var1, _Var1)
AND
DB_Combat_TurretTempaltes(_Var2, _Var1, _Var1, _Var1, _Var1)
THEN
SetEntityEvent(_Var1, "GLO_Combat_TurretVFX_Deactivate", 1);
DebugText(_Var1, "Deactivating");


EXITSECTION
ENDEXITSECTION

